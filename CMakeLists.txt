cmake_minimum_required(VERSION 3.26)

project(dtjlp)

add_subdirectory(build_tools)

# This is a literate programming project, so the source files need to be tangled
# together before it can be built. To do that, there is a pre-tangled version of
# this project that can be used to bootstrap the program.
# However, CMake does not allow you to have 2 of the same executable target,
# which will happen when a project has a subdirectory of itself. So when the
# DTJLP_BOOTSTRAP variable is set, the executable target is actually going to be
# dtjlp_bootstrap instead of dtjlp.
if(DTJLP_BOOTSTRAP)
	add_executable(dtjlp_bootstrap dtjlp.c)
else()
	add_executable(dtjlp dtjlp.c)
endif()

add_tangle_source(
	BOOTSTRAP
	TARGETS dtjlp.c
	MARKDOWN_FILE dtjlp.md
)

# To tangle source files with CMake, the dtjlp executable can be used via
# add_custom_command. For convenience, this CMake macro can be used to do the
# same thing.
# Usage:
# 	add_tangle_source([BOOTSTRAP] TARGETS target1 [target2 ...]
# 	MARKDOWN_FILE file)
# BOOTSTRAP (optional) is only needed when building dtjlp, it will use the
# bootstrap executable to tangle the target files.
# TARGETS (required) declares what source files will be generated by tangling.
# MARKDOWN_FILE (required) declares which markdown file will be used to tangle
# the target files.
macro(add_tangle_source)
	cmake_parse_arguments(dtjlp BOOTSTRAP MARKDOWN_FILE TARGETS ${ARGN})
	list(TRANSFORM dtjlp_TARGETS PREPEND ${CMAKE_CURRENT_SOURCE_DIR}/)
	set(dtjlp_MARKDOWN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${dtjlp_MARKDOWN_FILE})
	if(${dtjlp_BOOTSTRAP})
		set(dtjlp_EXECUTABLE dtjlp_bootstrap)
	else()
		set(dtjlp_EXECUTABLE dtjlp)
	endif()
	add_custom_command(
		OUTPUT ${dtjlp_TARGETS}
		COMMAND ${dtjlp_EXECUTABLE} ${dtjlp_MARKDOWN_FILE}
		DEPENDS ${dtjlp_MARKDOWN_FILE}
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
endmacro()
